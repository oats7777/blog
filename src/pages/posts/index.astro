---
import { getCollection, type CollectionEntry } from 'astro:content';

import Layout from '@/layouts/Layout.astro';
import Header from '@/components/Header.astro';
import Footer from '@/components/Footer.astro';
import BlogCard from '@/components/BlogCard.astro';
import styles from '@/styles/PostsList.module.css';

type PostEntry = CollectionEntry<'posts'>;
type BlogCardProps = {
  title: string;
  description: string;
  slug: string;
  date: string;
  category?: string;
  readTime?: string;
  tags: string[];
};

// Content Collections에서 모든 포스트 가져오기
const allPosts = await getCollection('posts');

// 날짜순으로 정렬
const posts: BlogCardProps[] = allPosts
  .filter((post: PostEntry) => !post.data.draft) // 초안이 아닌 글만
  .sort((a: PostEntry, b: PostEntry) => new Date(b.data.date).getTime() - new Date(a.data.date).getTime())
  .map(
    (post: PostEntry): BlogCardProps => ({
      title: post.data.title,
      description: post.data.description,
      slug: post.slug,
      date: post.data.date,
      category: post.data.category,
      readTime: post.data.readTime,
      tags: post.data.tags,
    })
  );

// 카테고리별 개수 계산
const categoryCount = posts.reduce((acc: Record<string, number>, post: BlogCardProps) => {
  if (post.category) {
    acc[post.category] = (acc[post.category] || 0) + 1;
  }
  return acc;
}, {});

const categories = Object.keys(categoryCount).sort();
---

<Layout title="모든 글 - Minkyu's Tech Blog" description="Minkyu의 기술 블로그의 모든 글을 확인해보세요.">
  <Header />

  <main class={styles.postsMain}>
    <div class="container">
      <div class={styles.postsHeader}>
        <h1 class={styles.postsTitle}>모든 글</h1>
        <p class={styles.postsDescription}>
          총 <strong>{posts.length}개</strong>의 글이 있습니다.
        </p>
      </div>

      <div class={styles.postsLayout}>
        <!-- 사이드바 -->
        <aside class={styles.postsSidebar}>
          <div class={styles.sidebarSection}>
            <h3>카테고리</h3>
            <ul class={styles.categoryList}>
              <li>
                <a href="/posts" class={`${styles.categoryLink} active`}>
                  전체 <span class={styles.count}>({posts.length})</span>
                </a>
              </li>
              {
                categories.map((category: string) => (
                  <li>
                    <a href={`/posts/category/${category.toLowerCase()}`} class={styles.categoryLink}>
                      {category} <span class={styles.count}>({categoryCount[category]})</span>
                    </a>
                  </li>
                ))
              }
            </ul>
          </div>
        </aside>

        <!-- 포스트 목록 -->
        <div class={styles.postsContent}>
          {
            posts.length > 0 ? (
              <div class={styles.postsGrid}>
                {posts.map((post) => (
                  <BlogCard {...post} />
                ))}
              </div>
            ) : (
              <div class={styles.noPosts}>
                <h3>아직 작성된 글이 없습니다</h3>
                <p>첫 번째 글을 작성해보세요!</p>
              </div>
            )
          }
        </div>
      </div>
    </div>
  </main>

  <Footer />
</Layout>
